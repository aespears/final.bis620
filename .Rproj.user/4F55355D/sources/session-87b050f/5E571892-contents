---
title: "DS$^3$ 2022-09-01"
format: html
---
Quarto markdown: header is a little different but otherwise same as rmarkdown

# What are we going to do?

## Reading and summarizing the Social Vulnerability Index

- Importing the data and the data dictionary
- Summarize the data using `dplyr`, `purrr`, `DT`, `gtsummary`, and `naniar`.

# [The CDC Social Vulnerability Index](https://www.atsdr.cdc.gov/placeandhealth/svi/index.html)

## What is it?

- Social vulnerability ["refers to the potential negative effects on communities caused by external stresses on human health. Such stresses include natural or human-caused disasters, or disease outbreaks. Reducing social vulnerability can decrease both human suffering and economic loss."](https://www.atsdr.cdc.gov/placeandhealth/svi/index.html)
- Data derived from ["15 U.S. census variables to help local officials identify communities that may need support before, during, or after disasters."](https://www.atsdr.cdc.gov/placeandhealth/svi/index.html)

## Where do I get it?

- https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html

## Which files are included?

- A `2018-data` directory.
- `SVI_2018.zip`
- `data-dictionary-2018.csv` - the data dictionary.
- `SVI2018Documentation_01192022_1.pdf` - written documentation.

# Importing the data and the data dictionary

```{r}
library(readr)
library(DT)
library(dplyr)
library(sf)

# file.path - platform independent (accounts for '\' in windows)
dd <- read_csv(file.path("2018-data", "data-dictionary-2018.csv"))


```

```{r}
class(dd)
# "spec_tbl_df" "tbl_df"      "tbl"         "data.frame" 
# tbl and tbl_df -> abstracts data frame to be more like a data source
```

```{r}
dd_df <- as.data.frame(dd) # go from tibble to regular R dataframe
class(dd_df)
dd_df # output is not nearly as nice!

class(dd_df$var_name) # character type (vector of strings)
class(dd_df[,'var_name']) # also character (same vector again)
class(dd_df[,c('var_name', 'description')]) # but this is a dataframe

# -- compare with tibble version --

class(dd[,'var_name']) # bracket indexing will guarantee to give you a tibble
class(dd$var_name) # this is a character though
```

```{r}
# use backticks `` to treat [ as a regular function
`[`(dd, c('var_name', 'description')) 

# also can use backticks to include spaces in variable names
`a b` <- 3
```

```{r}
# dplyr time!

dd[, c("var_name", "description")]

select(dd, var_name, description)

# %>% or |> (pipe operators)
dd |> select(var_name, description)

dds = select(dd, var_name, description)
datatable(dds)

# %>%

dd |> 
  select(var_name, description) |>
  datatable()
```

```{r}
library(sf) # spatial library "Simple features"
d <- read_sf(file.path("2018-data", "SVI2018_US_tract.shp"))
d

# lots of -999s for missing values...

# Last column "geometry"
```

# Cleaning

```{r}
library(purrr)
# Turn the -999's into NA's

# Using the column index.
db <- d

dbl_cols = which(map_lgl(db, is.double))

for (dc in dbl_cols) {
  db[[dc]][ db[[dc]] == -999 ] <- NA
}
db

# Using the column names.
# not so hard conceptually but harder to read 
db <- d

dbl_col_names = names(which(map_lgl(db, is.double)))

for (dcn in dbl_col_names) {
  db[ db[[dcn]] == -999 ,dcn] <- NA
}

# or

mnnn_to_na <- function(x) {
  x[x == -999] <- NA
  x
}

d <- d %>% 
  mutate_if(is.double, mnnn_to_na)
```

# Exploratory Visualizations


```{r}
library(naniar)
library(DT)
#datatable(miss_var_summary(d)) # Is this a better summary than DT?
d %>%
  miss_var_summary() %>%
  mutate(`Percent Missing` = round(pct_miss, 2)) %>%
  rename(`Number Missing` = n_miss, Variable = variable,
         `Percent Missing` =) %>%
  select(-pct_miss) %>%
  datatable()
```

```{r}
gg_miss_upset(d)
```

# Table summaries

## The data dictionary

```{r}
datatable(dd)
```

## The data

```{r}
library(gtsummary)
tbl_summary(d[1:10] |> as_tibble() |> select(-geometry))
```

## Which counties in Connecticut have the biggest difference in census tract GDPs?

```{r}
d |>
  filter(STATE == "CONNECTICUT") |>
  print()
```
